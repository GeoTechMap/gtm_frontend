{"version":3,"sources":["containers/GtmNav.js","views/dashboard/carte/Carte/CarteContent.js","views/dashboard/carte/Carte/index.js","views/dashboard/Dashboard.js"],"names":["GtmTab","aria-current","to","color","variant","style","marginRight","size","name","className","CarteContent","props","useContext","EssaiContext","globalData","setGlonbalData","LeafIcon","L","extend","options","MapContainer","fullscreenControl","height","width","center","zoom","scrollWheelZoom","LayersControl","position","BaseLayer","TileLayer","attribution","url","checked","essais","map","typeEssai","key","Overlay","nom","LayerGroup","spiderfyDistanceMultiplier","showCoverageOnHover","maxClusterRadius","essai","Marker","latitude","longitude","icon","colorCode","codeCouleur","iconUrl","Popup","id","institution","sigle","email","telephone1","adresse","description","altitude","dateRealisation","onClick","selectedEssai","handleOnClick","fichier","Tooltip","uuidv4","Carte","Dashboard","xs","md"],"mappings":"4KAAA,mCAqBeA,IAbA,WACb,OACC,qCACC,cAAC,IAAD,CAAOC,eAAa,OAAOC,GAAG,aAA9B,SACA,eAAC,IAAD,CAASC,MAAM,OAAOC,QAAQ,UAAUC,MAAO,CAACC,YAAY,GAA5D,UAAgE,cAAC,IAAD,CAAOC,KAAK,KAAKC,KAAK,qBAAqB,sBAAMC,UAAU,QAAhB,wBAE3G,cAAC,IAAD,CAAOR,eAAa,OAAOC,GAAG,SAA9B,SACA,eAAC,IAAD,CAASC,MAAM,OAAOC,QAAQ,UAA9B,UAAwC,cAAC,IAAD,CAAOG,KAAK,KAAKC,KAAK,kBAAkB,sBAAMC,UAAU,QAAhB,6B,gQCgLrEC,EA9KU,SAACC,GACtB,MAAqCC,qBAAWC,KAAhD,mBAAOC,EAAP,KAAmBC,EAAnB,KAMMC,EAAWC,OAAOC,OAAO,CAC7BC,QAAS,KA0Bb,OACA,gCACE,cAAC,IAAD,IAEG,cAACC,EAAA,EAAD,CACEX,UAAU,oBACVY,mBAAmB,EACrBhB,MAAO,CAACiB,OAAO,OAAQC,MAAM,QAC7BC,OATe,CAAC,WAAW,WAU3BC,KAAM,EAENC,iBAAiB,EAPjB,SAUD,eAACC,EAAA,EAAD,CAAeC,SAAS,WAAxB,UACE,cAACD,EAAA,EAAcE,UAAf,CAAyBrB,KAAK,8BAA9B,SACE,cAACsB,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,0DAGR,cAACL,EAAA,EAAcE,UAAf,CAAyBrB,KAAK,gCAA9B,SACE,cAACsB,EAAA,EAAD,CACEC,YAAY,wFACZC,IAAI,wEAGR,cAACL,EAAA,EAAcE,UAAf,CAAyBrB,KAAK,eAA9B,SACE,cAACsB,EAAA,EAAD,CACEC,YAAY,qDACZC,IAAI,uHAGR,cAACL,EAAA,EAAcE,UAAf,CAAyBrB,KAAK,qBAA9B,SACE,cAACsB,EAAA,EAAD,CACEC,YAAY,6IACZC,IAAI,oGAIR,cAACL,EAAA,EAAcE,UAAf,CAA0BrB,KAAK,cAA/B,SACE,cAACsB,EAAA,EAAD,CACEC,YAAY,kSACZC,IAAI,uDAGR,eAACL,EAAA,EAAcE,UAAf,CAA0BrB,KAAK,uBAA/B,UACE,cAACsB,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAEJ,cAACL,EAAA,EAAcE,UAAf,CAAyBI,SAAO,EAACzB,KAAK,8BAAtC,SACA,cAACsB,EAAA,EAAD,CACEC,YAAY,qIACZC,IAAI,qFAKjBlB,EAAWoB,OAAOC,KAAI,SAACC,EAAWC,GAAZ,OACrBD,EAAUF,SAAW,GACnB,8BAEA,cAACP,EAAA,EAAcW,QAAf,CAAuBL,SAAO,EAACzB,KAAM4B,EAAUG,IAA/C,SACA,cAACC,EAAA,EAAD,UACA,cAAC,IAAD,CAEQC,2BAA4B,EAC5BC,qBAAqB,EACrBC,iBAAkB,GAJ1B,SAMCP,EAAUF,OAAOC,KAAI,SAACS,EAAOP,GAAR,OACpB,8BAEM,eAACQ,EAAA,EAAD,CACIjB,SAAU,CAACgB,EAAMhB,SAASkB,SAC1BF,EAAMhB,SAASmB,WAGfC,MAxFuBC,EAwFSb,EAAUc,YAvFxC,IAAIlC,EAAS,CACvBmC,QAAQ,4EAAD,OACuEF,EADvE,wBAiFH,UAOE,cAACG,EAAA,EAAD,CACIxB,SAAU,CAACgB,EAAMhB,SAASkB,SAAUF,EAAMhB,SAASmB,WADvD,SAGA,gCACQ,6BAAI,8DAA8BH,EAAMS,QACxC,+BACI,+BAAI,mDAAJ,IAAoCjB,EAAUG,OAC9C,6BACA,oCACE,oCAAS,kDAA8BK,EAAMU,YAAYf,IAAzD,KAAgEK,EAAMU,YAAYC,MAAlF,OACA,+BACE,0CAAaX,EAAMU,YAAYE,SAC/B,oDAAiBZ,EAAMU,YAAYG,cACnC,4CAAeb,EAAMU,YAAYI,WACjC,gDAAgBd,EAAMU,YAAYK,uBAItC,+BAAI,+CAAJ,IAAgCf,EAAMhB,SAASkB,YAC/C,+BAAI,gDAAJ,IAAiCF,EAAMhB,SAASmB,aAChD,+BAAI,+CAAJ,IAAgCH,EAAMhB,SAASgC,YAG/C,+BAAI,6DAAJ,IAA2ChB,EAAMiB,mBACjD,oBAAIC,QAAS,kBAzIb,SAAClB,GACrB7B,EAAe,2BAAID,GAAL,IACZiD,cAAenB,KAuIsBoB,CAAcrD,EAAMiC,QAAvC,SAA+C,cAAC,IAAD,CAC/C1C,GAAE,eAAU0C,EAAMqB,QAAQZ,IADqB,oCAO7D,cAACa,EAAA,EAAD,UAAU9B,EAAUG,UAxChBF,GAjFsB,IAACY,MA2EtBkB,oBALF9B,GAgEV,iBC9KY,SAAS+B,IACxB,OAIA,aAHA,CAGC,EAAD,ICWaC,UAVG,WAChB,OACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAMC,GAAG,KAAKC,GAAG,KAAK9D,UAAU,OAAhC,SACG,cAAC2D,EAAD","file":"static/js/9.8351f4c2.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  CLink,\n  CButton\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react';\n\n\nconst GtmTab = () => {\n  return (\n   <>\n    <CLink aria-current=\"page\" to=\"/dashboard\" >\n    <CButton color=\"dark\" variant='outline' style={{marginRight:5}}><CIcon size=\"sm\" name=\"cil-location-pin\" /><span className=\"mfs-2\">Carte</span></CButton>\n    </CLink>\n    <CLink aria-current=\"page\" to=\"/liste\">\n    <CButton color=\"dark\" variant='outline'><CIcon size=\"sm\" name=\"cil-list-rich\" /><span className=\"mfs-2\">Liste</span></CButton>\n    </CLink>\n   </>\n  )\n}\n\nexport default GtmTab\n","import React, { useContext , useEffect} from \"react\";\nimport { Tooltip, Marker, Popup, TileLayer, MapContainer, LayersControl, LayerGroup, useMap} from 'react-leaflet';\n //import {Icon } from 'leaflet';\n\nimport { EssaiContext } from \"../../../../EssaisContext\";\nimport * as L from \"leaflet\";\nimport { Link } from 'react-router-dom';\nimport MarkerClusterGroup from 'react-leaflet-markercluster';\nimport \"./styles.scss\";\nimport \"leaflet-fullscreen/dist/Leaflet.fullscreen.js\";\nimport \"leaflet-fullscreen/dist/leaflet.fullscreen.css\";\nimport GtmTab from \"../../../../containers/GtmNav\";\nimport { v4 as uuidv4 } from 'uuid';\n// import zipUrl from \"./limitesCommunes.zip\";\n// import Shapefile from \"./ShapeFile\";\n// import shp from \"shpjs\";\n\n    const CarteContent = (props) => {\n    const [globalData, setGlonbalData] = useContext(EssaiContext);\n    const handleOnClick = (essai) => {\n      setGlonbalData({...globalData, \n        selectedEssai: essai})\n    }\n\n    const LeafIcon = L.Icon.extend({\n      options: {}\n    });\n\n\n\n     \n    //__DÉFINITION DES MARQUEURS POUR LES PRINCIPAUX TYPES D'ESSAIS\n    // const blueIcon = new LeafIcon({\n    //     iconUrl:\n    //         \"https://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%E2%80%A2|abcdef&chf=a,s,ee00FFFF\"\n    //     }),\n    //     greenIcon = new LeafIcon({\n    //       iconUrl:\n    //         \"https://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%E2%80%A2|2ecc71&chf=a,s,ee00FFFF\"\n    //     });\n    //__DÉFINITION DES MARQUEURS POUR LES PRINCIPAUX TYPES D'ESSAIS\n    // const [icon, setIcon] = useState(blueIcon);\n    const selectIconBaseOnColorCode = (colorCode) => {\n     const icon = new LeafIcon({\n        iconUrl:\n          `https://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%E2%80%A2|${colorCode}&chf=a,s,ee00FFFF`\n      });\n      return icon\n    };\n\n     const position = [18.843913,-71.730198]\n  return (\n  <div>\n    <GtmTab />\n    \n       <MapContainer \n         className=\"markercluster-map\"\n         fullscreenControl={true}\n       style={{height:'70vh', width:'100%'}} \n       center={position} \n       zoom={8}\n      //  minZoom={7}\n       scrollWheelZoom={true}>\n\n\n      <LayersControl position=\"topright\">\n        <LayersControl.BaseLayer name=\"OpenStreetMap.BlackAndWhite\">\n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\"\n          />\n        </LayersControl.BaseLayer>\n        <LayersControl.BaseLayer name=\"CyclOSM - Open Bicycle render\">\n          <TileLayer\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile-cyclosm.openstreetmap.fr/cyclosm/{z}/{x}/{y}.png\"\n          />\n        </LayersControl.BaseLayer>\n        <LayersControl.BaseLayer name=\"Esri.DeLorme\">\n          <TileLayer\n            attribution='Tiles &copy; Esri &mdash; Copyright: &copy;2012 DeLorme'\n            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/Specialty/DeLorme_World_Base_Map/MapServer/tile/{z}/{y}/{x}\"\n          />\n        </LayersControl.BaseLayer>\n        <LayersControl.BaseLayer name=\"Esri_WorldImagery \">\n          <TileLayer\n            attribution='Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'\n            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n          />\n        </LayersControl.BaseLayer>\n  \n        <LayersControl.BaseLayer  name=\"OpenTopoMap\">\n          <TileLayer\n            attribution='Map data: &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, <a href=\"http://viewfinderpanoramas.org\">SRTM</a> | Map style: &copy; <a href=\"https://opentopomap.org\">OpenTopoMap</a> (<a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA</a>)'\n            url=\"https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png\"\n          />\n        </LayersControl.BaseLayer>\n        <LayersControl.BaseLayer  name=\"OpenStreetMap.Mapnik\">\n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n            <LayersControl.BaseLayer checked name=\"OpenStreetMap.BlackAndWhite\">\n            <TileLayer\n              attribution='&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> &copy; <a href=\"http://cartodb.com/attributions\">CartoDB</a>'\n              url='https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png'\n            />\n        </LayersControl.BaseLayer>\n        </LayersControl.BaseLayer>\n\n{globalData.essais.map((typeEssai, key) => (\n  typeEssai.essais !== [] ? (\n    < div key={key} >\n    {/* Pour chaque type d'essai on crée un group et on ajoute tous les essais y relatif */}\n    <LayersControl.Overlay checked name={typeEssai.nom}> \n    <LayerGroup>\n    <MarkerClusterGroup\n            key={uuidv4()} \n            spiderfyDistanceMultiplier={1}\n            showCoverageOnHover={false}\n            maxClusterRadius={20}\n          >\n    {typeEssai.essais.map((essai, key) => (\n      <div key={key}>\n  \n            <Marker\n                position={[essai.position.latitude, \n                essai.position.longitude]}\n             \n                // icon={typeEssai.id == 4 ? blueIcon : greenIcon}\n                icon={selectIconBaseOnColorCode(typeEssai.codeCouleur)}\n                >\n              <Popup \n                  position={[essai.position.latitude, essai.position.longitude]}\n                  >\n              <div>\n                      <h5><strong>Résultat de l'essai: {essai.id}</strong></h5>\n                      <ul>\n                          <li><strong>Type d'essai:</strong> {typeEssai.nom}</li>\n                          <li>\n                          <details>\n                            <summary><strong>Institution:</strong>{essai.institution.nom} ({essai.institution.sigle})</summary>\n                            <ul>\n                              <li>Email : {essai.institution.email}</li>\n                              <li>Téléphone : {essai.institution.telephone1}</li>\n                              <li>Adresse : {essai.institution.adresse}</li>\n                              <li>À propos : {essai.institution.description}</li>\n                            </ul>\n                          </details>\n                          </li>\n                          <li><strong>Latitude:</strong> {essai.position.latitude}</li>\n                          <li><strong>Longitude:</strong> {essai.position.longitude}</li>\n                          <li><strong>Altitude:</strong> {essai.position.altitude}</li>\n                          {/* <li><strong>Méthode:</strong> ...</li> */}\n                          {/* <li><strong>Résultat: </strong><a href={essai.fichier.lien}>Voir document</a></li> */}\n                          <li><strong>Date de réalisation:</strong> {essai.dateRealisation}</li>\n                          <li onClick={() => handleOnClick(props.essai)}><Link \n                          to={`/pdf/${essai.fichier.id}`} \n                          >Résultats\n                          </Link></li>\n                      </ul>\n              </div>\n            </Popup>\n            <Tooltip>{typeEssai.nom}</Tooltip>\n          </Marker>  \n     \n         \n          \n      </div>\n       ))} \n       </MarkerClusterGroup>\n    </LayerGroup>\n    \n      </LayersControl.Overlay>\n  \n      </div>\n  ): null\n       \n        \n    )\n    )} \n     \n    </LayersControl>\n\n\n  </MapContainer>\n  </div>\n   \n  )\n}\n\nexport default CarteContent;\n","import React from \"react\";\nimport  CarteContent from './CarteContent';\n  export default function Carte() {\n  return (\n  // <CounterContextProvider>\n  //     <CarteContent />\n  // </CounterContextProvider>\n  <CarteContent />\n   \n  )\n}","import React from 'react'\nimport {\n  CCol,\n  CRow,\n\n} from '@coreui/react'\nimport Carte from './carte/Carte';\n\nconst Dashboard = () => {\n  return (\n    <CRow>\n      <CCol xs=\"12\" md=\"12\" className=\"mb-4\">\n         <Carte/>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Dashboard\n"],"sourceRoot":""}