{"version":3,"sources":["containers/GtmNav.js","views/dashboard/carte/Carte/single-page.js","views/dashboard/carte/Carte/PDF.js"],"names":["GtmTab","aria-current","to","color","variant","style","marginRight","size","name","className","SinglePage","props","useState","numPages","setNumPages","pageNumber","setPageNumber","changePage","offset","prevPageNumber","pdf","file","options","workerSrc","loading","onLoadSuccess","type","disabled","onClick","pdfjs","GlobalWorkerOptions","version","LoadFromBase64Example","match","setLoadingState","data","setData","useEffect","fetch","params","id","then","response","json","method","headers","body","JSON","stringify","nomFichier","nom","hashNomFichier","hashBase64","hashPdf","res","catch","error","console","log","base64File"],"mappings":"4KAAA,mCAqBeA,IAbA,WACb,OACC,qCACC,cAAC,IAAD,CAAOC,eAAa,OAAOC,GAAG,aAA9B,SACA,eAAC,IAAD,CAASC,MAAM,OAAOC,QAAQ,UAAUC,MAAO,CAACC,YAAY,GAA5D,UAAgE,cAAC,IAAD,CAAOC,KAAK,KAAKC,KAAK,qBAAqB,sBAAMC,UAAU,QAAhB,wBAE3G,cAAC,IAAD,CAAOR,eAAa,OAAOC,GAAG,SAA9B,SACA,eAAC,IAAD,CAASC,MAAM,OAAOC,QAAQ,UAA9B,UAAwC,cAAC,IAAD,CAAOG,KAAK,KAAKC,KAAK,kBAAkB,sBAAMC,UAAU,QAAhB,6B,6OCNrE,SAASC,EAAWC,GACjC,MAAgCC,mBAAS,MAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCF,mBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAOA,SAASC,EAAWC,GAClBF,GAAc,SAAAG,GAAc,OAAIA,EAAiBD,KAWnD,IAAQE,EAAQT,EAARS,IAER,OACE,qCACE,cAAC,IAAD,CACEC,KAAMD,EACNE,QAAS,CAAEC,UAAW,kBACtBC,QAAU,cAAC,IAAD,CAAYA,SAAS,EAAMjB,KAAM,KAC3CkB,cAzBN,YAA8C,IAAbZ,EAAY,EAAZA,SAC/BC,EAAYD,GACZG,EAAc,IAmBZ,SAME,cAAC,IAAD,CAAMD,WAAYA,MAEpB,gCACE,sCACQA,IAAeF,EAAW,EAAI,MADtC,QACkDA,GAAY,QAE9D,wBAAQa,KAAK,SAASC,SAAUZ,GAAc,EAAGa,QAxBvD,WACEX,GAAY,IAuBR,6BAGA,wBACES,KAAK,SACLC,SAAUZ,GAAcF,EACxBe,QA1BR,WACEX,EAAW,IAsBP,2BA3CRY,IAAMC,oBAAoBP,UAA1B,kDAAiFM,IAAME,QAAvF,kB,oBCoDeC,UAlDe,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAE5B,EAAwCrB,oBAAS,GAAjD,mBAAqBsB,GAArB,WACA,EAAwBtB,mBAAS,IAAjC,mBAAOuB,EAAP,KAAaC,EAAb,KAgCA,OA/BAC,qBAAU,WACNH,GAAgB,GAChBI,MAAM,0CAAD,OAA2CL,EAAMM,OAAOC,KAC5DC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAN,GAeP,OAdKG,MAAM,yCAA0C,CAC5CM,OAAQ,OACRC,QAAS,CAAE,eAAgB,mBAC3B,OAAU,oBACVC,KAAMC,KAAKC,UAAU,CACjBC,WAAYd,EAAKe,IACjBC,eAAgBhB,EAAKgB,eACrBC,WAAWjB,EAAKkB,YAEnBZ,MAAK,SAAAa,GAAG,OAAIA,EAAIX,UAChBF,MAAK,SAAAa,GAAG,OAAIlB,EAAQkB,MACpBC,OAAM,SAACC,GACJC,QAAQD,MAAM,SAAUA,MAE9BrB,KAERM,MAAK,kBAAMP,GAAgB,MAC3BqB,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZtB,GAAgB,QAKhB,IAQC,cALA,CAKA,OAAKzB,UAAU,MAAf,UACI,cAAC,IAAD,IAEA,cAACC,EAAD,CAAqBU,IAAG,sCAAiCe,EAAKwB","file":"static/js/8.fd11e083.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  CLink,\n  CButton\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react';\n\n\nconst GtmTab = () => {\n  return (\n   <>\n    <CLink aria-current=\"page\" to=\"/dashboard\" >\n    <CButton color=\"dark\" variant='outline' style={{marginRight:5}}><CIcon size=\"sm\" name=\"cil-location-pin\" /><span className=\"mfs-2\">Carte</span></CButton>\n    </CLink>\n    <CLink aria-current=\"page\" to=\"/liste\">\n    <CButton color=\"dark\" variant='outline'><CIcon size=\"sm\" name=\"cil-list-rich\" /><span className=\"mfs-2\">Liste</span></CButton>\n    </CLink>\n   </>\n  )\n}\n\nexport default GtmTab\n","import React, { useState } from \"react\";\nimport { Document, Page } from \"react-pdf\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nimport { pdfjs } from 'react-pdf';\n\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\n\nexport default function SinglePage(props) {\n  const [numPages, setNumPages] = useState(null);\n  const [pageNumber, setPageNumber] = useState(1); //setting 1 to show fisrt page\n\n  function onDocumentLoadSuccess({ numPages }) {\n    setNumPages(numPages);\n    setPageNumber(1);\n  }\n\n  function changePage(offset) {\n    setPageNumber(prevPageNumber => prevPageNumber + offset);\n  }\n\n  function previousPage() {\n    changePage(-1);\n  }\n\n  function nextPage() {\n    changePage(1);\n  }\n\n  const { pdf } = props;\n\n  return (\n    <>\n      <Document\n        file={pdf}\n        options={{ workerSrc: \"/pdf.worker.js\" }}\n        loading= {<ClipLoader loading={true} size={35} />}\n        onLoadSuccess={onDocumentLoadSuccess}\n      >\n        <Page pageNumber={pageNumber} />\n      </Document>\n      <div>\n        <p>\n          Page {pageNumber || (numPages ? 1 : \"--\")} sur {numPages || \"--\"}\n        </p>\n        <button type=\"button\" disabled={pageNumber <= 1} onClick={previousPage}>\n          Précédent\n        </button>\n        <button\n          type=\"button\"\n          disabled={pageNumber >= numPages}\n          onClick={nextPage}\n        >\n          Suivant\n        </button>\n      </div>\n    </>\n  );\n}\n","import React, { useState, useEffect } from 'react';\n\nimport SinglePagePDFViewer from \"./single-page\";\n// import AllPagesPDFViewer from \"./all-pages\";\nimport \"./styles.css\";\nimport GtmTab from \"../../../../containers/GtmNav\";\n// import ClipLoader from \"react-spinners/ClipLoader\";\n\nconst LoadFromBase64Example = ({match}) => {\n\n    const [loadingState, setLoadingState] = useState(false);\n    const [data, setData] = useState({})\n    useEffect(() => {\n        setLoadingState(true);\n        fetch(`http://localhost:8080/api/file/info?id=${match.params.id}`)\n        .then(response => response.json())\n        .then(data =>   {\n            fetch(`http://localhost:8081/api/file/getfile`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json',\n                'Accept': 'application/json'},\n                body: JSON.stringify({\n                    nomFichier: data.nom,\n                    hashNomFichier: data.hashNomFichier,\n                    hashBase64:data.hashPdf\n                })})\n                .then(res => res.json())\n                .then(res => setData(res))\n                .catch((error) => {\n                    console.error('Error:', error);\n                  });\n       return data;\n     })\n     .then(() => setLoadingState(false))\n     .catch((error) => {\n       console.log(error);\n       setLoadingState(false);\n     }); \n      \n        \n      \n    }, []);\n \n    return (\n        // <div  >{console.log(globalData)}\n        //     <embed src={`data:application/pdf;base64,${data.base64File}`}  \n        //     type=\"application/pdf\" width=\"100%\" height=\"100%\"></embed>\n       \n        // </div>\n        <div className=\"App\">\n            <GtmTab />\n            {/* <ClipLoader loading={loadingState} size={35} /> */}\n            <SinglePagePDFViewer pdf={`data:application/pdf;base64,${data.base64File}`}  />\n      </div>\n  \n    );\n};\n\nexport default LoadFromBase64Example;"],"sourceRoot":""}